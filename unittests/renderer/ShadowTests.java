package renderer;

import static java.awt.Color.BLUE;

import org.junit.jupiter.api.Test;

import geometries.*;
import lighting.*;
import primitives.*;
import scene.Scene;

/**
 * Testing basic shadows
 * @author Dan Zilberstein
 */
class ShadowTest {
   /** Default constructor to satisfy JavaDoc generator */
   ShadowTest() { /* to satisfy JavaDoc generator */ }

   /** Scene of the tests */
   private final Scene          scene      = new Scene("Test scene");
   /** Camera builder of the tests */
   private final Camera.Builder camera     = Camera.getBuilder()
           .setLocation(new Point(0, 0, 1000))
           .setDirection(Point.ZERO, Vector.AXIS_Y)
           .setVpDistance(1000)
           .setVpSize(200, 200)
           .setRayTracer(scene, RayTracerType.SIMPLE);

   /** The sphere in the tests */
   private final Intersectable  sphere     = new Sphere(60d,new Point(0, 0, -200))
           .setEmission(new Color(BLUE))
           .setMaterial(new Material().setKD(0.5).setKS(0.5).setShininess(30));
   /** The material of the triangles in the tests */
   private final Material       trMaterial = new Material().setKD(0.5).setKS(0.5).setShininess(30);

   /**
    * Helper function for the tests in this module
    * @param pictName     the name of the picture generated by a test
    * @param triangle     the triangle in the test
    * @param spotLocation the spotlight location in the test
    */
   private void sphereTriangleHelper(String pictName, Triangle triangle, Point spotLocation) {
      scene.geometries.add(sphere, triangle.setEmission(new Color(BLUE)).setMaterial(trMaterial));
      scene.lights //
              .add(new SpotLight(new Color(400, 240, 0), spotLocation, new Vector(1, 1, -3)) //
                      .setKl(1E-5).setKq(1.5E-7));
      camera
              .setResolution(400, 400) //
              .build() //
              .renderImage() //
              .writeToImage(pictName);
   }

   /** Produce a picture of a sphere and triangle with point light and shade */
   @Test
   void sphereTriangleInitial() {
      sphereTriangleHelper("shadowSphereTriangleInitial", //
              new Triangle(new Point(-70, -40, 0), new Point(-40, -70, 0), new Point(-68, -68, -4)), //
              new Point(-100, -100, 200));
   }

   /** Sphere-Triangle shading - move triangle up-right */
   @Test
   void sphereTriangleMove1() {
      sphereTriangleHelper("shadowSphereTriangleMove2", //
              new Triangle(new Point(-62, -32, 0), new Point(-32, -62, 0), new Point(-60, -60, -4)), //
              new Point(-100, -100, 200));
   }

   /** Sphere-Triangle shading - move triangle upper-righter */
   @Test
   void sphereTriangleMove2() {
      sphereTriangleHelper("shadowSphereTriangleMove1", //
              new Triangle(new Point(-49, -19, 0), new Point(-19, -49, 0), new Point(-47, -47, -4)), //
              new Point(-100, -100, 200));
   }

   /** Sphere-Triangle shading - move spot closer */
   @Test
   void sphereTriangleSpot1() {
      sphereTriangleHelper("shadowSphereTriangleSpot1", //
              new Triangle(new Point(-70, -40, 0), new Point(-40, -70, 0), new Point(-68, -68, -4)), //
              new Point(-87, -87, 116));
   }

   /** Sphere-Triangle shading - move spot even more close */
   @Test
   void sphereTriangleSpot2() {
      sphereTriangleHelper("shadowSphereTriangleSpot2", //
              new Triangle(new Point(-70, -40, 0), new Point(-40, -70, 0), new Point(-68, -68, -4)), //
              new Point(-75, -75, 67));
   }

   /**
    * Produce a picture of a two triangles lighted by a spot light with a Sphere
    * producing a shading
    */
   @Test
   void trianglesSphere() {
      scene.geometries //
              .add( //
                      new Triangle(new Point(-150, -150, -115), new Point(150, -150, -135), new Point(75, 75, -150)) //
                              .setMaterial(new Material().setKS(0.8).setShininess(60)), //
                      new Triangle(new Point(-150, -150, -115), new Point(-70, 70, -140), new Point(75, 75, -150)) //
                              .setMaterial(new Material().setKS(0.8).setShininess(60)), //
                      new Sphere(30d, new Point(0, 0, -11)) //
                              .setEmission(new Color(BLUE)) //
                              .setMaterial(new Material().setKD(0.5).setKS(0.5).setShininess(30)) //
              );
      scene.setAmbientLight(new AmbientLight(new Color(38, 38, 38)));
      scene.lights //
              .add(new SpotLight(new Color(700, 400, 400), new Point(40, 40, 115), new Vector(-1, -1, -4)) //
                      .setKl(4E-4).setKq(2E-5));

      camera//
              .setResolution(600, 600) //
              .build() //
              .renderImage() //
              .writeToImage("shadowTrianglesSphere");
   }

}